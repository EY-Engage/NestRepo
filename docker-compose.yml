version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ey-engage-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ey_engage_social
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ey-engage-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (pour cache et sessions WebSocket)
  redis:
    image: redis:7-alpine
    container_name: ey-engage-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ey-engage-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper pour Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ey-engage-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - ey-engage-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ey-engage-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 jours
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1GB
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ey-engage-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application NestJS
  nestjs-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ey-engage-nestjs
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: ey_engage_social
      DB_SYNCHRONIZE: true
      DB_LOGGING: false
      
      # JWT (MÊME SECRET QUE .NET CORE)
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_here_32_chars_minimum}
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Kafka
      KAFKA_CLIENT_ID: ey-engage-nestjs
      KAFKA_BROKERS: kafka:29092
      KAFKA_GROUP_ID: ey-engage-group
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # WebSocket
      WS_CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:3000}
      
      # Services externes
      DOTNET_SERVICE_URL: ${DOTNET_SERVICE_URL:-http://host.docker.internal:5000}
      DOTNET_SERVICE_API_KEY: ${DOTNET_SERVICE_API_KEY:-your_api_key_here}
      
      # Upload
      UPLOAD_DEST: uploads
      MAX_FILE_SIZE: 5242880
      ALLOWED_FILE_TYPES: jpg,jpeg,png,gif,pdf,doc,docx
      
      # Logging
      LOG_LEVEL: info
      LOG_FILE_PATH: logs/app.log
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - ey-engage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Kafka UI (pour debug et monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ey-engage-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ey-engage-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - ey-engage-network
    profiles:
      - debug

networks:
  ey-engage-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  uploads_data:
  logs_data: